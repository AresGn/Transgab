#!/usr/bin/env node

/**
 * Script de test de connexion √† la base de donn√©es Neon
 * Train Reservation Gabon
 */

require('dotenv').config();
const { Pool } = require('pg');

// Configuration de la connexion
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

/**
 * Affiche un message color√©
 */
function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * Teste la connexion de base
 */
async function testBasicConnection() {
  log('\nüîå Test de connexion de base...', colors.blue);
  
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT version()');
    
    log('‚úÖ Connexion r√©ussie!', colors.green);
    log(`üìä Version PostgreSQL: ${result.rows[0].version}`, colors.cyan);
    
    client.release();
    return true;
  } catch (error) {
    log('‚ùå Erreur de connexion:', colors.red);
    log(error.message, colors.red);
    return false;
  }
}

/**
 * V√©rifie que les tables existent
 */
async function checkTables() {
  log('\nüìã V√©rification des tables...', colors.blue);
  
  const expectedTables = [
    'users', 'stations', 'train_types', 'schedules', 
    'schedule_stops', 'bookings', 'passengers', 'payments', 'pricing'
  ];
  
  try {
    const client = await pool.connect();
    
    for (const table of expectedTables) {
      const result = await client.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = $1
        )
      `, [table]);
      
      if (result.rows[0].exists) {
        log(`‚úÖ Table '${table}' existe`, colors.green);
      } else {
        log(`‚ùå Table '${table}' manquante`, colors.red);
      }
    }
    
    client.release();
    return true;
  } catch (error) {
    log('‚ùå Erreur lors de la v√©rification des tables:', colors.red);
    log(error.message, colors.red);
    return false;
  }
}

/**
 * V√©rifie les donn√©es de base
 */
async function checkData() {
  log('\nüìä V√©rification des donn√©es...', colors.blue);
  
  try {
    const client = await pool.connect();
    
    // V√©rifier les gares
    const stationsResult = await client.query('SELECT COUNT(*) FROM stations');
    const stationsCount = parseInt(stationsResult.rows[0].count);
    
    if (stationsCount === 22) {
      log(`‚úÖ Gares: ${stationsCount}/22 (complet)`, colors.green);
    } else {
      log(`‚ö†Ô∏è  Gares: ${stationsCount}/22 (incomplet)`, colors.yellow);
    }
    
    // V√©rifier les types de trains
    const trainTypesResult = await client.query('SELECT COUNT(*) FROM train_types');
    const trainTypesCount = parseInt(trainTypesResult.rows[0].count);
    
    if (trainTypesCount === 2) {
      log(`‚úÖ Types de trains: ${trainTypesCount}/2 (complet)`, colors.green);
    } else {
      log(`‚ö†Ô∏è  Types de trains: ${trainTypesCount}/2 (incomplet)`, colors.yellow);
    }
    
    // V√©rifier les horaires
    const schedulesResult = await client.query('SELECT COUNT(*) FROM schedules');
    const schedulesCount = parseInt(schedulesResult.rows[0].count);
    
    if (schedulesCount === 8) {
      log(`‚úÖ Horaires: ${schedulesCount}/8 (complet)`, colors.green);
    } else {
      log(`‚ö†Ô∏è  Horaires: ${schedulesCount}/8 (incomplet)`, colors.yellow);
    }
    
    // V√©rifier les tarifs
    const pricingResult = await client.query('SELECT COUNT(*) FROM pricing');
    const pricingCount = parseInt(pricingResult.rows[0].count);
    
    if (pricingCount >= 28) {
      log(`‚úÖ Tarifs: ${pricingCount} configur√©s`, colors.green);
    } else {
      log(`‚ö†Ô∏è  Tarifs: ${pricingCount} configur√©s (peut-√™tre incomplet)`, colors.yellow);
    }
    
    client.release();
    return true;
  } catch (error) {
    log('‚ùå Erreur lors de la v√©rification des donn√©es:', colors.red);
    log(error.message, colors.red);
    return false;
  }
}

/**
 * Teste une requ√™te complexe
 */
async function testComplexQuery() {
  log('\nüîç Test de requ√™te complexe...', colors.blue);
  
  try {
    const client = await pool.connect();
    
    const result = await client.query(`
      SELECT 
        s.name as departure_station,
        s2.name as arrival_station,
        tt.display_name as train_type,
        sch.day_of_week,
        sch.departure_time
      FROM schedules sch
      JOIN stations s ON sch.departure_station_id = s.id
      JOIN stations s2 ON sch.arrival_station_id = s2.id
      JOIN train_types tt ON sch.train_type_id = tt.id
      WHERE sch.day_of_week = 'saturday'
      ORDER BY sch.departure_time
      LIMIT 5
    `);
    
    if (result.rows.length > 0) {
      log('‚úÖ Requ√™te complexe r√©ussie!', colors.green);
      log('üìã Exemple d\'horaires du samedi:', colors.cyan);
      
      result.rows.forEach(row => {
        log(`   ${row.departure_time} - ${row.train_type}: ${row.departure_station} ‚Üí ${row.arrival_station}`, colors.cyan);
      });
    } else {
      log('‚ö†Ô∏è  Requ√™te r√©ussie mais aucun r√©sultat', colors.yellow);
    }
    
    client.release();
    return true;
  } catch (error) {
    log('‚ùå Erreur lors de la requ√™te complexe:', colors.red);
    log(error.message, colors.red);
    return false;
  }
}

/**
 * Affiche les informations de configuration
 */
function showConfig() {
  log('\n‚öôÔ∏è  Configuration actuelle:', colors.blue);
  
  const dbUrl = process.env.DATABASE_URL;
  if (dbUrl) {
    // Masquer le mot de passe pour la s√©curit√©
    const maskedUrl = dbUrl.replace(/:([^:@]+)@/, ':****@');
    log(`üì° DATABASE_URL: ${maskedUrl}`, colors.cyan);
  } else {
    log('‚ùå DATABASE_URL non configur√©e', colors.red);
  }
  
  log(`üåç NODE_ENV: ${process.env.NODE_ENV || 'non d√©fini'}`, colors.cyan);
  log(`üîß Pool min: ${process.env.DB_POOL_MIN || '1'}`, colors.cyan);
  log(`üîß Pool max: ${process.env.DB_POOL_MAX || '5'}`, colors.cyan);
}

/**
 * Fonction principale
 */
async function main() {
  log('üöÇ Test de connexion Neon - Train Reservation Gabon', colors.green);
  log('=' .repeat(60), colors.blue);
  
  showConfig();
  
  // V√©rifier que DATABASE_URL est configur√©e
  if (!process.env.DATABASE_URL) {
    log('\n‚ùå DATABASE_URL non configur√©e dans .env', colors.red);
    log('üí° Copiez .env.example vers .env et configurez votre cha√Æne Neon', colors.yellow);
    process.exit(1);
  }
  
  let allTestsPassed = true;
  
  // Ex√©cuter tous les tests
  allTestsPassed &= await testBasicConnection();
  allTestsPassed &= await checkTables();
  allTestsPassed &= await checkData();
  allTestsPassed &= await testComplexQuery();
  
  // R√©sum√© final
  log('\n' + '=' .repeat(60), colors.blue);
  
  if (allTestsPassed) {
    log('üéâ Tous les tests sont pass√©s! Base de donn√©es Neon pr√™te.', colors.green);
    log('üöÄ Vous pouvez maintenant lancer: npm run dev', colors.green);
  } else {
    log('‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.', colors.yellow);
    log('üìñ Consultez scripts/setup-neon.md pour l\'aide', colors.yellow);
  }
  
  await pool.end();
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  log('‚ùå Erreur non captur√©e:', colors.red);
  log(error.message, colors.red);
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  log('‚ùå Promesse rejet√©e non g√©r√©e:', colors.red);
  log(reason, colors.red);
  process.exit(1);
});

// Lancer le script
if (require.main === module) {
  main().catch((error) => {
    log('‚ùå Erreur lors de l\'ex√©cution:', colors.red);
    log(error.message, colors.red);
    process.exit(1);
  });
}

module.exports = { main };
